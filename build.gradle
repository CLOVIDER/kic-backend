plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.cloud.tools.jib' version '3.1.2'
}

group = 'clovider'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jib {
    from {
        image = 'eclipse-temurin:17-jre'
    }
    to {
        image = 'kids-in-company.kr-central-2.kcr.dev/clovider-registry/clovider-be-app'
        tags = [project.findProperty('jib.to.tags') ?: 'latest']
    }
    container {
        entrypoint = ['java', '-Dspring profiles.active=prod', '-jar', 'app.jar']
        ports = ['8080']
        jvmFlags = ['-Xms512m', '-Xmx512m']
        environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
        labels = [Iversion: project.version, name: project.name, group: project.group]
        format = 'Docker'
    }
    extraDirectories {
        paths {
            path {
                from = file('build/libs')
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'mysql:mysql-connector-java:8.0.29'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Hibernate Validator 추가
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // json
    implementation 'com.googlecode.json-simple:json-simple:1.1'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'

    // monitor
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    // mail & thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // pdf
    implementation("org.xhtmlrenderer:flying-saucer-pdf:9.1.20")

    // test h2
    testRuntimeOnly 'com.h2database:h2'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

// submodule
processResources.dependsOn('copyGitSubmodule')
task copyGitSubmodule(type: Copy) {
    from './application-config'
    include '*.yml'
    into 'src/main/resources'

}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}